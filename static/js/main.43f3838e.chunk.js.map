{"version":3,"sources":["Tabular/TabularHeader.js","Tabular/index.js","Tabular/utils.js","App.js","index.js"],"names":["fontawesome","library","add","faCheckSquare","faCoffee","faArrowUp","faArrowDown","faWindowClose","TabularHeader","props","dropdownOpen","setDropdownOpen","useState","_jsxs","className","children","_jsx","headerTitle","columns","length","onClick","handleSetDropdownOpen","style","display","flexDirection","margin","alignItems","width","whiteSpace","FontAwesomeIcon","fontSize","icon","map","col","handleSetHiddenCols","Math","random","Tabular","activeSort","setActiveSort","tableData","setTableData","data","draggedElement","setDraggedElement","hiddenCols","setHiddenCols","headers","setHeaders","tableElement","useRef","colsRef","handleSetHeaders","useCallback","cols","Set","i","Object","keys","flat","filter","el","includes","j","val","ref","current","e","useEffect","newD","sort","a","b","_a$activeSort$","toString","localeCompare","_b$activeSort$","console","log","handleOnDrop","draggedEl","findIndex","element","_id","droppedLoc","updatedAfterDrop","arr","old_index","new_index","k","push","undefined","splice","arrayMove","handleSetActiveSort","direction","currentlyHidden","find","item","_ref","height","draggable","id","row","onDragStart","handleOnDrag","persist","onDragOver","handleOnDragOver","preventDefault","onDrop","d","p","name","join","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43f3838e.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './tabular.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport fontawesome from '@fortawesome/fontawesome'\nimport { faCheckSquare, faCoffee, faArrowUp, faArrowDown, faWindowClose } from '@fortawesome/fontawesome-free-solid'\n\nfontawesome.library.add(faCheckSquare, faCoffee, faArrowUp, faArrowDown, faWindowClose);\n\n\nfunction TabularHeader(props) {\n    const [dropdownOpen, setDropdownOpen] = useState(false)\n    const handleSetDropdownOpen = () => dropdownOpen ? setDropdownOpen(false) : setDropdownOpen(true)\n    return (\n        <div className=\"tab-header-container\">\n            <h1 className='header-title'>{props.headerTitle || 'Tabular List'}</h1>\n            {props.columns && props.columns.length ? (<div className='hidden-cols' onClick={handleSetDropdownOpen}>\n                <div style={{ display: 'flex', flexDirection: 'row', margin: 'auto', alignItems: 'center', width: '5em',whiteSpace: 'nowrap' }}>\n                    Hidden Columns\n                    {dropdownOpen ? <FontAwesomeIcon style={{ fontSize: '10px' }} icon=\"fa-solid fa-arrow-up\" /> :\n                        <FontAwesomeIcon style={{ fontSize: '10px' }} icon=\"fa-solid fa-arrow-down\" />}\n                </div>\n                {dropdownOpen ?\n                    (<ul>\n                        {props.columns.map(col => <li key={Math.random()} onClick={() => props.handleSetHiddenCols(col)}>{col}</li>)}\n                    </ul>) : null}\n            </div>) : null}\n        </div>\n    );\n}\n\nexport default TabularHeader;\n","import './tabular.css';\nimport data from './fake-data.json'\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport fontawesome from '@fortawesome/fontawesome'\nimport { faCheckSquare, faCoffee, faArrowUp, faArrowDown, faWindowClose } from '@fortawesome/fontawesome-free-solid'\nimport TabularHeader from './TabularHeader';\nimport {\n    // alphaSort, numSort, onDragStart, onDragOver, onDrop,\n    arrayMove,\n    createHeaders\n} from './utils';\n\nfontawesome.library.add(faCheckSquare, faCoffee, faArrowUp, faArrowDown, faWindowClose);\n\n\nfunction Tabular(props) {\n    const [activeSort, setActiveSort] = useState(null)\n    // const [colWidths, setColWidths] = useState({})\n    const [tableData, setTableData] = useState(data)\n    const [draggedElement, setDraggedElement] = useState(null)\n    const [hiddenCols, setHiddenCols] = useState([])\n    const [headers, setHeaders] = useState([])\n    // const [tableHeight, setTableHeight] = useState(\"auto\");\n    const tableElement = useRef(null);\n    // const [activeIndex, setActiveIndex] = useState(null);\n\n    // console.log('headers', headers)\n    // const columns = createHeaders(headers);\n    // useEffect(() => {\n    //     setTableHeight(tableElement.current.offsetHeight);\n    // }, []);\n\n    // const mouseDown = (index) => {\n    //     setActiveIndex(index);\n    // };\n\n    // const mouseMove = useCallback(\n    //     (e) => {\n    //         const gridColumns = headers.map((col, i) => {\n    //             if (i === activeIndex) {\n    //                 const width = e.clientX - col.ref.current.offsetLeft;\n\n    //                 if (width >= props.minCellWidth || 200) {\n    //                     return `${width}px`;\n    //                 }\n    //             }\n    //             return `${col.ref.current.offsetWidth}px`;\n    //         });\n\n    //         tableElement.current.style.gridTemplateColumns = `${gridColumns.join(\n    //             \" \"\n    //         )}`;\n    //     },\n    //     [activeIndex, headers, props.minCellWidth]\n    // );\n\n    // const removeListeners = useCallback(() => {\n    //     window.removeEventListener(\"mousemove\", mouseMove);\n    //     window.removeEventListener(\"mouseup\", removeListeners);\n    // }, [mouseMove]);\n\n    // const mouseUp = useCallback(() => {\n    //     setActiveIndex(null);\n    //     removeListeners();\n    // }, [setActiveIndex, removeListeners]);\n\n    // useEffect(() => {\n    //     if (activeIndex !== null) {\n    //         window.addEventListener(\"mousemove\", mouseMove);\n    //         window.addEventListener(\"mouseup\", mouseUp);\n    //     }\n\n    //     return () => {\n    //         removeListeners();\n    //     };\n    // }, [activeIndex, mouseMove, mouseUp, removeListeners]);\n    const colsRef = useRef({});\n    const handleSetHeaders = useCallback(() => {\n        // const columns = createHeaders(headers);\n\n        const headersForTable = [...new Set(data.map(i => Object.keys(i)).flat())]\n        const headersForTableWithoutHidden = headersForTable.filter((el) => !hiddenCols.includes(el));\n        const cols = headersForTableWithoutHidden.map(j => ({val: j, ref: el => colsRef.current[j] = el}))\n        setHeaders(e => cols)\n    }, [hiddenCols])\n\n    useEffect(() => {\n        if (activeSort && activeSort.length) {\n            let newD = []\n            if (activeSort[1] === 'down') {\n                newD = data.sort((a, b) => {\n                    return a[activeSort[0]] - b[activeSort[0]] || a[activeSort[0]]?.toString().localeCompare(b[activeSort[0]].toString())\n                });\n            } else {\n                newD = data.sort((a, b) => {\n                    return b[activeSort[0]] - a[activeSort[0]] || b[activeSort[0]]?.toString().localeCompare(a[activeSort[0]].toString())\n                });\n            }\n            console.log(newD)\n            setTableData(newD)\n        }\n        handleSetHeaders()\n        // setTableData(data)\n    }, [activeSort, tableData, draggedElement, handleSetHeaders]);\n\n    // const handleResize = (e, val) => {\n    //     e.persist();\n    //     console.log('resizing', e, val)\n    // }\n    // const handleResizeDrop = (e, val) => {\n    //     e.stopPropagation();\n    //     e.preventDefault();\n    //     console.log('resizing', e, val)\n    // }\n\n    const handleOnDrag = (e, val) => {\n        console.log('handleOnDrag', e, val)\n        e.persist();\n        setDraggedElement(val._id)\n    }\n    const handleOnDragOver = (e, val) => {\n        console.log('handleOnDragOver', e, val)\n        // e.stopPropagation();\n        e.preventDefault();\n    }\n    const handleOnDrop = (e, val) => {\n        console.log('handleOnDrop', e, val)\n        const dragged = (element) => element._id === draggedElement;\n        const dropped = (element) => element._id === val._id;\n        const draggedEl = tableData.findIndex(dragged)\n        const droppedLoc = tableData.findIndex(dropped)\n        const updatedAfterDrop = arrayMove(tableData, draggedEl, droppedLoc)\n        console.log('updatedAfterDrop', updatedAfterDrop)\n        setTableData(updatedAfterDrop)\n        setDraggedElement(null)\n    }\n    const handleSetActiveSort = (val, direction) => setActiveSort([val, direction])\n\n    const handleSetHiddenCols = (col) => {\n        let currentlyHidden = [...hiddenCols]\n        if (currentlyHidden.find(i => i === col)) {\n             currentlyHidden = currentlyHidden.filter(item => item !== col)\n        } else {\n            currentlyHidden.push(col)\n        }\n        setHiddenCols(currentlyHidden)\n    }\n    console.log('draggedel in  state:::', draggedElement)\n    return (\n        <div className=\"tabular-main\">\n            <TabularHeader\n                columns={hiddenCols}\n                handleSetHiddenCols={handleSetHiddenCols} />\n            <table className='tabular-table' ref={tableElement}>\n                <thead className='tabular-header'>\n                    <tr className='tabular-row-header'>\n                        {headers.map(({ ref, val }, i) => (<th ref={ref} className='tabular-th' width={200} key={Math.random()}>\n                            <div style={{ display: 'flex', flexDirection: 'row' }}>{val}\n                                <div className='sorting-icons'>\n                                    <FontAwesomeIcon style={{ fontSize: '10px' }} icon=\"fa-solid fa-arrow-up\" onClick={() => handleSetActiveSort(val, 'up')} />\n                                    <FontAwesomeIcon style={{ fontSize: '10px' }} icon=\"fa-solid fa-arrow-down\" onClick={() => handleSetActiveSort(val, 'down')} />\n                                </div>\n                                <div className='hide-col'>\n                                    <FontAwesomeIcon style={{ fontSize: '10px' }} icon=\"fa-solid fa-window-close\" onClick={() => handleSetHiddenCols(val)} />\n                                </div>\n                                <div \n                                // className={`col-resize resize-handle ${activeIndex === i ? \"active\" : \"idle\"\n                                //     }`}\n                                className={`col-resize resize-handle`}\n                                    // style={{ height: tableHeight }}\n                                    style={{ height: 'auto' }}\n                                    // onMouseDown={() => mouseDown(i)}\n                                draggable\n                                id={val._id}\n                                // onDragStart={(a) => handleResize(a, val)}\n                                // onDragOver={(a) => handleOnDrag(a, val)}\n                                // onDrop={(a) => handleResizeDrop(a, val)}\n                                />\n                            </div>\n                        </th>))}\n                    </tr>\n                </thead>\n                <tbody className='tabular-body'>\n                    {tableData.map(row =>\n                        <tr key={Math.random()}\n                            draggable\n                            className='tabular-row'\n                            onDragStart={(e) => handleOnDrag(e, row)}\n                            onDragOver={(e) => handleOnDragOver(e, row)}\n                            onDrop={(e) => handleOnDrop(e, row)}>\n                            {Object.keys(row).map(d => <td key={Math.random()} className='tabular-cell' style={hiddenCols.includes(d) ? {display: 'none'} : {}}>\n                                {!hiddenCols.includes(d) ? typeof row[d] === 'object' ? Object.keys(row[d]).map(p => row[d][p].name || row[d][p]).join(', ') : row[d].toString() : null}\n                            </td>)}\n                        </tr>)}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default Tabular;\n","import produce from 'immer'\n\nimport { useRef } from 'react';\n\nexport const alphaSort = (items, dir, val) => {\n    if (dir === 'up') {\n    items.sort((a, b) => {\n        const nameA = a[val].toUpperCase(); // ignore upper and lowercase\n        const nameB = b[val].toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n            return -1;\n        }\n        if (nameA > nameB) {\n            return 1;\n        }\n\n        // names must be equal\n        return 0;\n    })\n} else {\n    items.sort((a, b) => {\n        const nameA = a[val].toUpperCase(); // ignore upper and lowercase\n        const nameB = b[val].toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n            return 1;\n        }\n        if (nameA > nameB) {\n            return -1;\n        }\n\n        // names must be equal\n        return 0;\n    })\n}\n}\n\nexport const numSort = (dir, a, b) => {\n    if (dir === 'up') {\n        return a - b;\n    } else {\n        return b - a;\n    }\n}\n\nfunction getPosFromId(id) {\n  return id.split(\",\").map((n) => parseInt(n, 10));\n}\n\nexport function onDragStart(evt) {\n  evt.persist();\n  //store id as key so onDragOver can read it via \"types\"\n  evt.dataTransfer.setData(evt.target.id, \"\");\n}\n\nexport function onDragOver(evt) {\n  evt.persist();\n  const fromPos = getPosFromId(evt.dataTransfer.types[0]);\n  const toPos = getPosFromId(evt.target.closest(\"td\").id);\n  if (\n    (fromPos[0] === toPos[0] && fromPos[1] !== toPos[1]) || //horizontal only\n    (fromPos[1] === toPos[1] && fromPos[0] !== toPos[0]) //vertical only\n  ) {\n    evt.preventDefault(); //allow drop\n  }\n}\n\nexport function onDrop(evt, setGrid) {\n  evt.preventDefault();\n  const fromPos = getPosFromId(evt.dataTransfer.types[0]);\n  const toPos = getPosFromId(evt.target.closest(\"td\").id);\n  if (fromPos[0] === toPos[0] && fromPos[1] !== toPos[1]) {\n    //horizontal drag\n    const dist = Math.abs(toPos[1] - fromPos[1]);\n    const dir = toPos[1] > fromPos[1] ? 1 : -1; //to right or left\n    setGrid(\n      produce((draft) => {\n        const cell = draft[fromPos[0]][fromPos[1]];\n        for (var i = 0; i < dist; i += 1) {\n          draft[fromPos[0]][fromPos[1] + i * dir] =\n            draft[fromPos[0]][fromPos[1] + (i + 1) * dir];\n        }\n        draft[fromPos[0]][fromPos[1] + dist * dir] = cell;\n      })\n    );\n  } else {\n    //vertical drag\n    const dist = Math.abs(toPos[0] - fromPos[0]);\n    const dir = toPos[0] > fromPos[0] ? 1 : -1; //to down or up\n    setGrid(\n      produce((draft) => {\n        const cell = draft[fromPos[0]][fromPos[1]];\n        for (var i = 0; i < dist; i += 1) {\n          draft[fromPos[0] + i * dir][fromPos[1]] =\n            draft[fromPos[0] + (i + 1) * dir][fromPos[1]];\n        }\n        draft[fromPos[0] + dist * dir][fromPos[1]] = cell;\n      })\n    );\n  }\n}\n\nexport function arrayMove(arr, old_index, new_index) {\n    console.log(old_index, new_index)\n    if (new_index >= arr.length) {\n        var k = new_index - arr.length + 1;\n        while (k--) {\n            arr.push(undefined);\n        }\n    }\n    arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n    console.log('arrrrrr', arr)\n    return arr;\n};\n\nexport function createHeaders(headers) {\n  return headers.map((item) => ({\n      val: item,\n      ref: useRef()\n  }));\n};","import './App.css';\nimport Tabular from './Tabular';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n<Tabular />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}