{"version":3,"sources":["Tabular/index.js","Tabular/utils.js","App.js","index.js"],"names":["fontawesome","library","add","faCheckSquare","faCoffee","faArrowUp","faArrowDown","Tabular","activeSort","setActiveSort","useState","colWidths","setColWidths","tableData","setTableData","data","draggedElement","setDraggedElement","console","log","headers","Set","map","i","Object","keys","flat","useEffect","length","newD","sort","a","b","_a$activeSort$","toString","localeCompare","_b$activeSort$","handleSetActiveSort","val","direction","index","_jsx","className","children","_jsxs","width","style","display","flexDirection","FontAwesomeIcon","fontSize","icon","onClick","draggable","row","onDragStart","e","handleOnDrag","persist","target","_id","onDragOver","handleOnDragOver","stopPropagation","preventDefault","onDrop","handleOnDrop","parentNode","draggedEl","findIndex","element","droppedLoc","updatedAfterDrop","arr","old_index","new_index","k","push","undefined","splice","arrayMove","d","p","name","join","Math","random","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c71b7b4b.chunk.js","sourcesContent":["import './tabular.css';\nimport data from './fake-data.json'\nimport { useState,useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport fontawesome from '@fortawesome/fontawesome'\nimport { faCheckSquare, faCoffee, faArrowUp, faArrowDown } from '@fortawesome/fontawesome-free-solid'\nimport { \n    // alphaSort, numSort, onDragStart, onDragOver, onDrop,\narrayMove } from './utils';\n\nfontawesome.library.add(faCheckSquare, faCoffee, faArrowUp, faArrowDown);\n\nfunction Tabular() {\n    const [activeSort, setActiveSort] = useState(null)\n    const [colWidths, setColWidths] = useState({})\n    const [tableData, setTableData] = useState(data)\n    const [draggedElement, setDraggedElement] = useState(null)\n\n    console.log('data...', data)\n    const headers = [...new Set(data.map(i => Object.keys(i)).flat())]\n    console.log('headers', headers)\n    useEffect(() => {\n        if (activeSort && activeSort.length) {\n            let newD = []\n            if (activeSort[1] === 'down') {\n                newD = data.sort((a, b) => {\n                    return a[activeSort[0]] - b[activeSort[0]] || a[activeSort[0]]?.toString().localeCompare(b[activeSort[0]].toString())\n                });\n            } else {\n                newD = data.sort((a, b) => {\n                    console.log(a, activeSort[0], b[activeSort[0]])\n                    return b[activeSort[0]] - a[activeSort[0]] || b[activeSort[0]]?.toString().localeCompare(a[activeSort[0]].toString())\n                });\n            }\n            console.log(newD)\n            setTableData(newD)\n        }\n        // setTableData(data)\n      }, [activeSort, tableData, draggedElement]);\n\n    const handleOnDrag = (e, val) => {\n        e.persist();\n        // console.log('dragging...', e, val, e.target)\n        setDraggedElement(e.target._id)\n    }\n    const handleOnDragOver = (e, val) => {\n        e.stopPropagation();\n        e.preventDefault();\n    }\n    const handleOnDrop = (e, val) => {\n        console.log('dropping...', e, val, e.target.parentNode)\n        const dragged = (element) => element._id === draggedElement;\n        const dropped = (element) => element._id === val._id;\n        const draggedEl = tableData.findIndex(dragged)\n        const droppedLoc = tableData.findIndex(dropped)\n        const updatedAfterDrop = arrayMove(tableData, draggedEl, droppedLoc)\n        setTableData(updatedAfterDrop)\n        setDraggedElement(null)\n    }\n    const handleSetActiveSort = (val, direction) => setActiveSort([val, direction])\n    console.log('tableData',tableData)\n    console.log('active  sort is...', activeSort, tableData[0].index, tableData[1].index)\n    return (\n        <div className=\"tabular-main\">\n            <table className='tabular-table'>\n                <thead className='tabular-header'>\n                    <tr className='tabular-row-header'>\n                        {headers.map(val => (<th className='tabular-th' width={200}>\n                            <div style={{ display: 'flex', flexDirection: 'row' }}>{val}\n                                <div className='sorting-icons'>\n                                    <FontAwesomeIcon style={{ fontSize: '10px' }} icon=\"fa-solid fa-arrow-up\" onClick={() => handleSetActiveSort(val, 'up')} />\n                                    <FontAwesomeIcon style={{ fontSize: '10px' }} icon=\"fa-solid fa-arrow-down\" onClick={() => handleSetActiveSort(val, 'down')} />\n                                </div>\n                                <div className='col-resize' draggable />\n                            </div>\n                        </th>))}\n                    </tr>\n                </thead>\n                <tbody className='tabular-body'>\n                    {tableData.map(row =>\n                        <tr key={Math.random()}\n                            draggable\n                            className='tabular-row'\n                            onDragStart={(e) => handleOnDrag(e, row)}\n                            onDragOver={(e) => handleOnDragOver(e, row)}\n                            onDrop={(e) => handleOnDrop(e, row)}>\n                            {Object.keys(row).map(d => <td key={Math.random()} className='tabular-cell'>\n                                {typeof row[d] === 'object' ? Object.keys(row[d]).map(p => row[d][p].name || row[d][p]).join(', ') : row[d].toString()}\n                            </td>)}\n                        </tr>)}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default Tabular;\n","import produce from 'immer'\n\nexport const alphaSort = (items, dir, val) => {\n    if (dir === 'up') {\n    items.sort((a, b) => {\n        const nameA = a[val].toUpperCase(); // ignore upper and lowercase\n        const nameB = b[val].toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n            return -1;\n        }\n        if (nameA > nameB) {\n            return 1;\n        }\n\n        // names must be equal\n        return 0;\n    })\n} else {\n    items.sort((a, b) => {\n        const nameA = a[val].toUpperCase(); // ignore upper and lowercase\n        const nameB = b[val].toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n            return 1;\n        }\n        if (nameA > nameB) {\n            return -1;\n        }\n\n        // names must be equal\n        return 0;\n    })\n}\n}\n\nexport const numSort = (dir, a, b) => {\n    if (dir === 'up') {\n        return a - b;\n    } else {\n        return b - a;\n    }\n}\n\nfunction getPosFromId(id) {\n  return id.split(\",\").map((n) => parseInt(n, 10));\n}\n\nexport function onDragStart(evt) {\n  evt.persist();\n  //store id as key so onDragOver can read it via \"types\"\n  evt.dataTransfer.setData(evt.target.id, \"\");\n}\n\nexport function onDragOver(evt) {\n  evt.persist();\n  const fromPos = getPosFromId(evt.dataTransfer.types[0]);\n  const toPos = getPosFromId(evt.target.closest(\"td\").id);\n  if (\n    (fromPos[0] === toPos[0] && fromPos[1] !== toPos[1]) || //horizontal only\n    (fromPos[1] === toPos[1] && fromPos[0] !== toPos[0]) //vertical only\n  ) {\n    evt.preventDefault(); //allow drop\n  }\n}\n\nexport function onDrop(evt, setGrid) {\n  evt.preventDefault();\n  const fromPos = getPosFromId(evt.dataTransfer.types[0]);\n  const toPos = getPosFromId(evt.target.closest(\"td\").id);\n  if (fromPos[0] === toPos[0] && fromPos[1] !== toPos[1]) {\n    //horizontal drag\n    const dist = Math.abs(toPos[1] - fromPos[1]);\n    const dir = toPos[1] > fromPos[1] ? 1 : -1; //to right or left\n    setGrid(\n      produce((draft) => {\n        const cell = draft[fromPos[0]][fromPos[1]];\n        for (var i = 0; i < dist; i += 1) {\n          draft[fromPos[0]][fromPos[1] + i * dir] =\n            draft[fromPos[0]][fromPos[1] + (i + 1) * dir];\n        }\n        draft[fromPos[0]][fromPos[1] + dist * dir] = cell;\n      })\n    );\n  } else {\n    //vertical drag\n    const dist = Math.abs(toPos[0] - fromPos[0]);\n    const dir = toPos[0] > fromPos[0] ? 1 : -1; //to down or up\n    setGrid(\n      produce((draft) => {\n        const cell = draft[fromPos[0]][fromPos[1]];\n        for (var i = 0; i < dist; i += 1) {\n          draft[fromPos[0] + i * dir][fromPos[1]] =\n            draft[fromPos[0] + (i + 1) * dir][fromPos[1]];\n        }\n        draft[fromPos[0] + dist * dir][fromPos[1]] = cell;\n      })\n    );\n  }\n}\n\nexport function arrayMove(arr, old_index, new_index) {\n    if (new_index >= arr.length) {\n        var k = new_index - arr.length + 1;\n        while (k--) {\n            arr.push(undefined);\n        }\n    }\n    arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n    return arr; // for testing\n};","import './App.css';\nimport Tabular from './Tabular';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n<Tabular />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}